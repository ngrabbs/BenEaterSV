
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`include "../rtl/cpu_package.svh"

module cpusys_de0nano(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		     [1:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N,

	//////////// EPCS //////////
	output		          		EPCS_ASDO,
	input 		          		EPCS_DATA0,
	output		          		EPCS_DCLK,
	output		          		EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	output		          		G_SENSOR_CS_N,
	input 		          		G_SENSOR_INT,
	output		          		I2C_SCLK,
	inout 		          		I2C_SDAT,

	//////////// ADC //////////
	output		          		ADC_CS_N,
	output		          		ADC_SADDR,
	output		          		ADC_SCLK,
	input 		          		ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	inout 		    [12:0]		GPIO_2,
	input 		     [2:0]		GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [33:0]		gpio0,
	input 		     [1:0]		gpio0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [33:0]		gpio1,
	input 		     [1:0]		gpio1_IN
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
// assign output signals to FPGA pins
logic       clk;
logic       halt;
logic       out_strobe;
byte_t      out_value;   // output byte from OUT opcode

//logic unused_strobe = out_strobe;       // quiet unused warning

// reset
logic               reset_ff0, reset_ff1, reset;

//=======================================================
//  Structural coding
//=======================================================

// === clock setup
always_comb         clk = CLOCK_50;
logic               clk_en;
logic [18:0]        slow_clk;

// reset button synchronizer
always_ff @(posedge clk) begin
    reset       <= !reset_ff1;
    reset_ff1   <= reset_ff0;
    reset_ff0   <= KEY[0];
end

always_ff @(posedge clk) begin
    if (reset) begin
        clk_en      <= 1'b0;
        slow_clk    <= '0;
    end else begin
        slow_clk    <= slow_clk + 1'b1;
        if (slow_clk == '0) begin
            clk_en      <= 1'b1;
        end else begin
            clk_en      <= 1'b0;
        end
    end
end

assign LED[0] = out_value[0];
assign LED[1] = out_value[1];
assign LED[2] = out_value[2];
assign LED[3] = out_value[3];
assign LED[4] = out_value[4];
assign LED[5] = out_value[5];
assign LED[6] = out_value[6];
assign LED[7] = out_value[7];

// === instantiate main module
cpu_main main(
    .clk_en_i(clk_en),
    .reset_i(reset),
    .out_strobe_o(out_strobe),
    .out_value_o(out_value),
    .halt_o(halt),
    .clk(clk)
);

endmodule
